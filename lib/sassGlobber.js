var fs = require('fs');
var glob = require('glob');
var Chalk = require('chalk');
var Helpers = require('./helpers/utils');
var Watcher = require('./helpers/watcher');
var Events = require('./helpers/events');

var sassGlobbing;

var SassGlobbing = function (obj) {
	this.options = {
		sassRoot: 'tmp',
		source: 'styles.scss',
		output: 'styles.tmp.scss',
		hint: false,
		watch: false
	};

	this.options = Helpers.extend(this.options, obj);
	this.options.sassRoot = this.options.sassRoot.replace(/\/$/, "");
	this.source = this.options.sassRoot + '/' + this.options.source;
	this.output = this.options.sassRoot + '/' + this.options.output;

	if (this.options.watch) this.bindEvents();
};

SassGlobbing.prototype.compiled = function (cb) {
	var _this = this;
	var hint = '// This file is generated by sass-globber.\n' +
		'// Do not edit this file manually!\n' +
		'// Just add your styles/imports to your source file: ' + this.options.source + '.\n\n';
	var data = this.options.hint !== false ? this.options.hint : hint;
	data = data + this.getFiles();

	Helpers.write(this.output, data, function () {
		console.log(Chalk.cyan.bold(_this.options.output + ' is successfully generated in ' + _this.options.sassRoot));
		if (cb && typeof (cb) === "function") cb();
	});
};

SassGlobbing.prototype.bindEvents = function () {
	var _this = this;

	Watcher(this.options);

	Events.registerEvent('sassGlobber:addFile', function () {
		_this.compiled();
	});
	Events.registerEvent('sassGlobber:deleteFile', function () {
		_this.compiled();
	});
	Events.registerEvent('sassGlobber:changedFile', function () {
		_this.compiled();
	});
};

SassGlobbing.prototype.getFiles = function () {
	var _this = this;
	var content = fs.readFileSync(this.source, 'UTF-8');

	var importStrings = content.match(/^@import.+\*.*$/mg);

	if (importStrings) {
		importStrings.forEach(function (importEl) {
			// remove all " or '
			var el = importEl.replace(/["']/g, '');
			// remove @import
			el = el.replace(/^@import/g, '');
			// remove ; and whitespaces
			el = el.replace(/;$/g, '').trim();
			// get all files
			var files = glob.sync(_this.options.sassRoot + '/' + el);
			// get all imports
			var tmpContent = _this.getImports(files);

			content = content.replace(importEl, tmpContent.join("\n"));
		});
	}

	return content;
};

SassGlobbing.prototype.getImports = function (files) {
	var _this = this;
	var tmpContent = [];

	files.forEach(function (matchedFile) {
		if (fs.statSync(matchedFile).isFile()) {
			var matched = matchedFile.replace(_this.options.sassRoot + '/', '');
			matched = matched.replace(/\.scss|\.sass/mg, '');

			tmpContent.push('@import "' + matched + '";');
		}
	});

	return tmpContent;
};

sassGlobbing = function (opts) {
	return new SassGlobbing(opts);
};

sassGlobbing.compiled = function (opts, cb) {
	return sassGlobbing(opts).compiled(cb);
};

module.exports = sassGlobbing;
